from tkinter import *
from tkinter.ttk import *
import tkinter as tk
from tkinter import filedialog
import os
import functools
import tkinter.scrolledtext as st
from tkinter import ttk

class ReadOnlyText(st.ScrolledText):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.config(state=tk.DISABLED)

        self.insert = self._unlock(super().insert)
        self.delete = self._unlock(super().delete)

    def _unlock(self, f):
        @functools.wraps(f)
        def wrap(*args, **kwargs):
            self.config(state=tk.NORMAL)
            r = f(*args, **kwargs)
            self.config(state=tk.DISABLED)
            return r
        return wrap

text_area=()

class SparkyWindow(object):
    def __init__(self, newWindow,sequence_file,seq_directory,save_file,save_directory):
        global text_area
        self.sparky_assign_window = Toplevel(newWindow)
        self.sparky_assign_window.title("Custom Assignment Completion")
        self.sparky_assign_window.geometry("800x800")
        tk.Label(self.sparky_assign_window, text="ALA").grid(row=0)
        tk.Label(self.sparky_assign_window, text="ARG").grid(row=1)
        tk.Label(self.sparky_assign_window, text="ASN").grid(row=2)
        tk.Label(self.sparky_assign_window, text="ASP").grid(row=3)
        tk.Label(self.sparky_assign_window, text="CYS").grid(row=4)
        tk.Label(self.sparky_assign_window, text="GLN").grid(row=5)
        tk.Label(self.sparky_assign_window, text="GLU").grid(row=6)
        tk.Label(self.sparky_assign_window, text="GLY").grid(row=7)
        tk.Label(self.sparky_assign_window, text="HIS").grid(row=8)
        tk.Label(self.sparky_assign_window, text="ILE").grid(row=9)
        tk.Label(self.sparky_assign_window, text="LEU").grid(row=0,column=2)
        tk.Label(self.sparky_assign_window, text="LYS").grid(row=1,column=2)
        tk.Label(self.sparky_assign_window, text="MET").grid(row=2,column=2)
        tk.Label(self.sparky_assign_window, text="PHE").grid(row=3,column=2)
        tk.Label(self.sparky_assign_window, text="PRO").grid(row=4,column=2)
        tk.Label(self.sparky_assign_window, text="SER").grid(row=5,column=2)
        tk.Label(self.sparky_assign_window, text="THR").grid(row=6,column=2)
        tk.Label(self.sparky_assign_window, text="TRP").grid(row=7,column=2)
        tk.Label(self.sparky_assign_window, text="TYR").grid(row=8,column=2)
        tk.Label(self.sparky_assign_window, text="VAL").grid(row=9,column=2)
        tk.Label(self.sparky_assign_window, text="Atoms Desired").grid(row=10)
        self.ALA_input = tk.Entry(self.sparky_assign_window)
        self.ALA_input.grid(row=0, column=1,padx=20)
        self.ARG_input = tk.Entry(self.sparky_assign_window)
        self.ARG_input.grid(row=1, column=1)
        self.ASN_input = tk.Entry(self.sparky_assign_window)
        self.ASN_input.grid(row=2, column=1)
        self.ASP_input = tk.Entry(self.sparky_assign_window)
        self.ASP_input.grid(row=3, column=1)
        self.CYS_input = tk.Entry(self.sparky_assign_window)
        self.CYS_input.grid(row=4, column=1)
        self.GLN_input = tk.Entry(self.sparky_assign_window)
        self.GLN_input.grid(row=5, column=1)
        self.GLU_input = tk.Entry(self.sparky_assign_window)
        self.GLU_input.grid(row=6, column=1)
        self.GLY_input = tk.Entry(self.sparky_assign_window)
        self.GLY_input.grid(row=7, column=1)
        self.HIS_input = tk.Entry(self.sparky_assign_window)
        self.HIS_input.grid(row=8, column=1)
        self.ILE_input = tk.Entry(self.sparky_assign_window)
        self.ILE_input.grid(row=9, column=1)
        self.LEU_input = tk.Entry(self.sparky_assign_window)
        self.LEU_input.grid(row=0, column=3)
        self.LYS_input = tk.Entry(self.sparky_assign_window)
        self.LYS_input.grid(row=1, column=3)
        self.MET_input = tk.Entry(self.sparky_assign_window)
        self.MET_input.grid(row=2, column=3)
        self.PHE_input = tk.Entry(self.sparky_assign_window)
        self.PHE_input.grid(row=3, column=3)
        self.PRO_input = tk.Entry(self.sparky_assign_window)
        self.PRO_input.grid(row=4, column=3)
        self.SER_input = tk.Entry(self.sparky_assign_window)
        self.SER_input.grid(row=5, column=3)
        self.THR_input = tk.Entry(self.sparky_assign_window)
        self.THR_input.grid(row=6, column=3)
        self.TRP_input = tk.Entry(self.sparky_assign_window)
        self.TRP_input.grid(row=7, column=3)
        self.TYR_input = tk.Entry(self.sparky_assign_window)
        self.TYR_input.grid(row=8, column=3)
        self.VAL_input = tk.Entry(self.sparky_assign_window)
        self.VAL_input.grid(row=9, column=3)
        self.atoms_input = tk.Entry(self.sparky_assign_window)
        self.atoms_input.grid(row=10, column=1,columnspan=3,sticky=W+E)
        self.sparky_assign_window.btn = tk.Button(self.sparky_assign_window,text='Enter',command= lambda: self.enter_custom_assignment(save_file,save_directory,sequence_file,seq_directory))
        self.sparky_assign_window.btn.grid(row=11,column=1)
        self.sparky_assign_window.btn = tk.Button(self.sparky_assign_window,text='Exit',command=self.sparky_assign_window.destroy)
        self.sparky_assign_window.btn.grid(row=12,column=1)
        self.sparky_assign_window.btn = tk.Button(self.sparky_assign_window,text='Special Run',command= lambda: self.enter_special_assignment(save_file,save_directory,sequence_file,seq_directory))
        self.sparky_assign_window.btn.grid(row=11,column=2)

        ttk.Label(self.sparky_assign_window,text = "Program Output",font = ("Times New Roman", 15),background = 'green',foreground = "white").grid(column = 0, row = 13)

        text_area = ReadOnlyText(self.sparky_assign_window,height=20,font = ("Times New Roman",12))
        text_area.grid(row=14,column=0,columnspan=5,sticky=W+E)

    def enter_custom_assignment(self,save_file,save_directory,sequence_file,seq_directory):
        from custom_assignment import custom_assignment
        ALA=self.ALA_input.get()
        ARG=self.ARG_input.get()
        ASN=self.ASN_input.get()
        ASP=self.ASP_input.get()
        CYS=self.CYS_input.get()
        GLN=self.GLN_input.get()
        GLU=self.GLU_input.get()
        GLY=self.GLY_input.get()
        HIS=self.HIS_input.get()
        ILE=self.ILE_input.get()
        LEU=self.LEU_input.get()
        LYS=self.LYS_input.get()
        MET=self.MET_input.get()
        PHE=self.PHE_input.get()
        PRO=self.PRO_input.get()
        SER=self.SER_input.get()
        THR=self.THR_input.get()
        TRP=self.TRP_input.get()
        TYR=self.TYR_input.get()
        VAL=self.VAL_input.get()
        atom_list=self.atoms_input.get()
        custom_assignment(ALA,ARG,ASN,ASP,CYS,GLN,GLU,GLY,HIS,ILE,LEU,LYS,MET,PHE,PRO,SER,THR,TRP,TYR,VAL,atom_list,save_file,save_directory,sequence_file,seq_directory,text_area)
    def enter_special_assignment(self,save_file,save_directory,sequence_file,seq_directory):
        from custom_assignment import special_assignmnet
        ALA=self.ALA_input.get()
        ARG=self.ARG_input.get()
        ASN=self.ASN_input.get()
        ASP=self.ASP_input.get()
        CYS=self.CYS_input.get()
        GLN=self.GLN_input.get()
        GLU=self.GLU_input.get()
        GLY=self.GLY_input.get()
        HIS=self.HIS_input.get()
        ILE=self.ILE_input.get()
        LEU=self.LEU_input.get()
        LYS=self.LYS_input.get()
        MET=self.MET_input.get()
        PHE=self.PHE_input.get()
        PRO=self.PRO_input.get()
        SER=self.SER_input.get()
        THR=self.THR_input.get()
        TRP=self.TRP_input.get()
        TYR=self.TYR_input.get()
        VAL=self.VAL_input.get()
        atom_list=self.atoms_input.get()
        special_assignmnet(ALA,ARG,ASN,ASP,CYS,GLN,GLU,GLY,HIS,ILE,LEU,LYS,MET,PHE,PRO,SER,THR,TRP,TYR,VAL,atom_list,save_file,save_directory,sequence_file,seq_directory,text_area)
